name: C/C++ CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  ubuntu:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: ammaraskar/gcc-problem-matcher@master

    - name: deps
      run: sudo apt install libreadline-dev bison libfl-dev rapidjson-dev

    - name: configure
      run: cmake
        -DCMAKE_CXX_COMPILER=g++-11
        -DCMAKE_C_COMPILER=gcc-11
        -DCMAKE_CXX_FLAGS="-O2 -pipe -fno-plt -Wall -Wextra"
        -DCMAKE_C_FLAGS="-O2 -pipe -fno-plt -Wall -Wextra"
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX=/usr
        -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
        -B build

    - name: build
      run: |
          export MAKEFLAGS=-j$(nproc)
          cmake --build build

    - name: deb
      run: |
          strip --strip-all $(find build -maxdepth 1 -executable -type f)
          cmake --build build --target package

    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu_package
        path: build/*.deb

  arch-linux:
    runs-on: ubuntu-latest
    container: greyltc/archlinux-aur

    steps:
    - name: Syu
      run: sudo -u ab yay -Syu --noconfirm jq

    - name: Get last tag
      id: tag
      env:
        url: https://api.github.com/repos/${{ github.repository }}/tags
      run: |
          set -o pipefail
          echo ::set-output name=tag::$(curl \
              --silent \
              --header 'authorization: Bearer ${{ github.token }}' \
              --url $url | \
              jq --raw-output '.[].name' | \
              head --lines=1 \
          )

    - uses: actions/checkout@v2
      with:
        ref: ${{ steps.tag.outputs.tag }}

    - name: Checkout repo head
      env:
        REF: ${{ github.ref }}
      run: |
          git fetch origin ${REF#refs/heads/}
          git checkout FETCH_HEAD
          git log --decorate=on

    - name: chown
      run: chown --recursive ab pkg/arch

    - name: makepkg
      working-directory: ./pkg/arch
      run: |
          export MAKEFLAGS=-j$(nproc)
          export PKGDEST=./
          export PKGEXT=.pkg.tar.zst
          sudo -Eu ab makepkg -s --noconfirm

    - uses: actions/upload-artifact@v2
      with:
        name: arch_package
        path: pkg/arch/*.pkg.tar.*

  windows:
    runs-on: windows-latest

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: base-devel
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ntldd-git
          mingw-w64-x86_64-rapidjson
          mingw-w64-x86_64-readline
          mingw-w64-x86_64-toolchain

    - uses: actions/checkout@v2

    - name: configure
      shell: msys2 {0}
      run: echo "$PATH" && cmake.exe
        -G 'MSYS Makefiles'
        -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
        -DCMAKE_CXX_FLAGS="-Wall -Wextra -O2"
        -DCMAKE_C_FLAGS="-Wall -Wextra -O2"
        -B build

    - name: build
      shell: msys2 {0}
      run: |
          export MAKEFLAGS=-j$(nproc)
          cmake.exe --build build

    - name: Copy dlls
      shell: msys2 {0}
      working-directory: ./build
      run: |
          ntldd -R *exe |
          grep -i mingw |
          cut -d">" -f2 |
          cut -d" " -f2 |
          cygpath -u |
          xargs -I{} cp "{}" .

    - uses: actions/upload-artifact@v2
      with:
        name: windows_package
        path: |
            build/*.exe
            build/*.dll
